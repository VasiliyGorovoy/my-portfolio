# -*- coding: utf-8 -*-
"""Лабораторная работа Python

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bq58gnAIwQrH1DmETivueqs5MBnp-HpU

Задача 1

Дан список:

list_01 = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 14, 46, 273, 22, 99, 15, 1000]

Напишите алгоритм, который выводит число, равное сумме элементов списка, которые больше 10, но меньше 100, и которые больше 200, но меньше 500.
"""

list_01 = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 14, 46, 273, 22, 99, 15, 1000]
#создаем пустую переменную
summa = 0
#создаем цикл прохода по элементам списка
for i in list_01:
  #если 10 < i <100 и 200 < i <500
  if ( i > 10 and i < 100 ) or ( i > 200 and i < 500 ):
    #то прибавляем i к переменной summa
    summa += i
print (summa)

"""Задача 2

Дана строка:

some_string = "History is always written by the winners. When two cultures clash, the loser is obliterated, and the winner writes the history books - books which glorify their own cause and disparage the conquered foe. As Napoleon once said, 'What is history, but a fable agreed upon?'"

Напишите функцию, которая будет принимать в качестве аргумента букву и выводить все слова из строки, начинающиеся на эту букву (например, “w”).
"""

some_string = """History is always written by the winners.
 When two cultures clash, the loser is obliterated, and the winner writes the history books -
 books which glorify their own cause and disparage the conquered foe.
 As Napoleon once said, 'What is history, but a fable agreed upon?'"""

import re

def find_words(starting_letter):
  pattern = r"\b" + starting_letter + r"[^\W_]+"
  return re.findall(pattern, some_string)

print(find_words("w"))

"""Задача 3

Напишите функцию, которая генерирует случайную последовательность из 6 цифр, причем в этой последовательности должна быть как минимум одна цифра 3. Позиция 3 определяться случайным образом. Например: "456379" или "033456".
"""

import random
"""создаем функцию без аргументов"""
def generate_number():
  """создаем первую случайную цифру(переменную) от 0 до 9
  с преобразованием ее в строку"""
  number = str(random.randint(0,9))
  """цикл создает еще 5 случайных чисел"""
  for i in range(5):
    """добавляем еще одно случайное число от 0 до 9
    с преобразованием в строку"""
    number += str(random.randint(0,9))
    """преобразовываем набор чисел в список"""
    num_list = list(number)
    """генерируем случайный индекс от 0 до 5"""
    random_index = random.randint(0,5)
    """если индекс меньше длины списка..."""
    if random_index < len(num_list):
      """тогда заменяем элемент списка по индексу на число 3 """
      num_list[random_index] = '3'
    """к результату присоединяем список без разделителя"""
    result = ''.join(num_list)
  return result

print(generate_number())

"""Задача 4

Данные студентов представлены в виде списка списков:

students = [
["0001", "Антонов", "Антон", "Игоревич", "20.08.2009","БСТ161"],
["1102", "Богов", "Артем", "Игоревич", "25.01.2010","БСТ162"],
["0333", "Глаголева", "Анастасия", "Николаевна", "11.07.2009", "БСТ163"],
["4004", "Степанова", "Наталья", "Александровна", "13.02.2008", "БСТ161"],
["0045", "Боков", "Игорь", "Харитонович", "02.06.2009", "БСТ161"],
["0096", "Васильков", "Валентин", "Сергеевич", "20.03.2009", "БСТ164"],
["0607", "Сиропова", "Виолетта", "Эдуардовна", "28.05.2010", "БСТ162"],
["4014", "Потапов", "Дмитрий", "Станиславович", "14.02.2012", "БСТ161"]
    ]
1. Преобразуйте данные таким образом, чтобы они были представлены в виде словаря, в котором ключами являются номера студентов, а значениями — список из других данных о студентах.

2. Напишите функцию, которая принимает номер группы и выводит пронумерованный и упорядоченный по алфавиту список (фамилии, имена, отчества) всех студентов этой группы. Необходимо обращаться к словарю.

"""

students = [
    ["0001", "Антонов", "Антон", "Игоревич", "20.08.2009","БСТ161"],
    ["1102", "Богов", "Артем", "Игоревич", "25.01.2010","БСТ162"],
    ["0333", "Глаголева", "Анастасия", "Николаевна", "11.07.2009", "БСТ163"],
    ["4004", "Степанова", "Наталья", "Александровна", "13.02.2008", "БСТ161"],
    ["0045", "Боков", "Игорь", "Харитонович", "02.06.2009", "БСТ161"],
    ["0096", "Васильков", "Валентин", "Сергеевич", "20.03.2009", "БСТ164"],
    ["0607", "Сиропова", "Виолетта", "Эдуардовна", "28.05.2010", "БСТ162"],
    ["4014", "Потапов", "Дмитрий", "Станиславович", "14.02.2012", "БСТ161"] ]
"""создаем пустой словарь"""
students_dict = {}
"""заполняем словарь, номер студента - ключ,
  остальные данные значения"""
for student in students:
 student_id = student[0]
 students_dict[student_id] = student[1:]

"""создаем функцию группы студентов"""
def group_students(group_number):
  """генератор списка, использует словарь students_dict и проверяет
   последний элемент списка students на соответствие с group_number по индексу."""
  students_in_group = [student[0:] for student_id, student in students_dict.items() if student[-1] == group_number]
  """список сортируется методом sort"""
  students_in_group.sort()
  """цикл проходит по списку students_in_group и выводит каждого студента в группе с номером"""
  for i, student in enumerate(students_in_group, start=1):
    print(f"{i}. {student[0]} {student[1]} {student[2]}")

group_students("БСТ164")

"""Задача 5

Создайте класс Student, который создает объекты с данными о студентах (как в задаче 4). Класс должен иметь следующие методы: add_to_dict (добавляет объект в словарь из задачи 4), update_dict (обновляет запись о студенте в словаре из задачи 4), change_group (изменяет номер группы студента), change_id (изменяет номер студента) и print_date (выводит на экран данные студента).

"""

class Student:
    def __init__(self, s_id, last_name, first_name, patronomic_name, date, group):
      self.id_student = s_id
      self.last_name = last_name
      self.first_name = first_name
      self.group = group
      self.patronomic_name = patronomic_name
      self.date = date

    def add_to_dict(self, dictionary):
       dictionary[self.id_student] = {
           'last_name' : self.last_name,
           'first_name' : self.first_name,
           'patronomic_name' : self.patronomic_name,
           'group': self.group,
           'date' : self.date
           }

    def update_dict(self, dictionary):
       if self.id_student in dictionary:
            dictionary[self.id_student].update({
                'last_name': self.last_name,
                'first_name': self.first_name,
                'patronomic_name': self.patronomic_name,
                'group': self.group,
                'date': self.date
            })
       else:
            raise ValueError(f"Студента с id {self.id_student} нет в словаре.")

    def change_group(self, new_group):
      self.group = new_group

    def change_id(self, new_id):
      self.id_student = new_id

    def print_data(self):
           print(f"ID студента: {self.id_student}")
           print(f"Фамилия: {self.last_name}")
           print(f"Имя: {self.first_name}")
           print(f"Отчество: {self.patronomic_name}")
           print(f"Группа: {self.group}")
           print(f"Дата рождения: {self.date}")

"""Задача 6

Дана матрица matrix. Напишите код, который будет транспонировать её (то есть, делать из строк столбцы) в maytix_t:

matrix_t = [ [0, 6, 3, 4, 5], [1, 2, 3, 6, 7], [2, 2, 3, 7, 3], [4, 1, 3, 1, 4], [8, 9, 3, 2, 0] ]
"""

matrix = [
    [0,1,2,4,8],
    [6,2,2,1,9],
    [3,3,3,3,3],
    [4,6,7,1,2],
    [5,7,3,4,0]]

# Количество строк и столбцов в исходной матрице
rows = len(matrix)
cols = len(matrix[0])

# Создаём новую пустую матрицу для результата
matrix_t = [[0] * rows for _ in range(cols)]

# Транспонируем матрицу
for i in range(rows):
    for j in range(cols):
        matrix_t[j][i] = matrix[i][j]

# Выводим результат
for row in matrix_t:
    print(row)