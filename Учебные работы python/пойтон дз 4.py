# -*- coding: utf-8 -*-
"""notbook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17huSiU9rHh0UGFDNa8S3LKZequaHi5kZ

Вам нужно помочь секретарю автоматизировать работу. Для этого нужно написать программу, которая будет на основе хранимых данных исполнять пользовательские команды.

Исходные данные имеют следующую структуру:

перечень всех документов

documents = [

  {'type': 'passport', 'number': '2207 876234', 'name': 'Василий Гупкин'},

  {'type': 'invoice', 'number': '11-2', 'name': 'Геннадий Покемонов'},

  {'type': 'insurance', 'number': '10006', 'name': 'Аристарх Павлов'}

]

перечень полок, на которых хранятся документы (если документ есть в documents, то он обязательно должен быть и в directories)

directories = {

    '1': ['2207 876234', '11-2'],
    '2': ['10006'],
    '3': []
}

Общие требования к программе:

код должен быть грамотно декомпозирован (каждая функция отвечает за свою конкретную задачу, дублирующийся функционал переиспользуется, а его код не повторяется);
в коде отсутствуют глобальные переменные (за исключением documents и directories);
пользовательский ввод обрабатывается в цикле while до тех пор, пока пользователь явно не завершит программу (вводом команды "q").
"""

"""исходные данные"""
documents = [
    {'type': 'passport', 'number': '2207 876234', 'name': 'Василий Гупкин'},
    {'type': 'invoice', 'number': '11-2', 'name': 'Геннадий Покемонов'},
    {'type': 'insurance', 'number': '10006', 'name': 'Аристарх Павлов'}
]
directories = {
    '1': ['2207 876234', '11-2'],
    '2': ['10006'],
    '3': []
}

"""Пункт 1. Пользователь по команде "p" может узнать владельца документа по его номеру"""
def get_owner (documents, doc_number):
 for document in documents:
        if document['number'] == doc_number:
            return document['name']
 return f"Документ с номером {doc_number} не найден."


"""Пункт 2. Пользователь по команде "s" может по номеру документа узнать на какой полке он хранится"""
def get_shelf(directories, doc_number):
  for shelf, docs_on_shelf in directories.items():
        if doc_number in docs_on_shelf:
            return shelf
  return f"Документа с номером {doc_number} нет на полках."

"""Пункт 3. Пользователь по команде "l" может увидеть полную информацию по всем документам"""
def show_all_doc(documents, directories):
    for document in documents:
        doc_number = document["number"]
        found_shelf = None
        for shelf, doc_numbers_on_shelf in directories.items():
            if doc_number in doc_numbers_on_shelf:
                found_shelf = shelf
                break
        if found_shelf:
            print(f"{document['type']} \"{document['number']}\" принадлежит {document['name']}, полка: {found_shelf}")
        else:
            print(f"{document['type']} \"{document['number']}\" принадлежит {document['name']}, полка не найдена")


"""Пункт 4. Пользователь по команде "ads" может добавить новую полку"""
def add_new (directories):
    new_shelf_number = input("Введите номер новой полки: ")
    if new_shelf_number not in directories:
        directories[new_shelf_number] = []
        print(f"Полка '{new_shelf_number}' успешно создана.")
        print("Текущие полки:", ", ".join(directories.keys()))
    else:
        print(f"Полка с номером '{new_shelf_number}' уже существует.")


"""Пункт 5. Пользователь по команде "ds" может удалить существующую полку из данных (только если она пустая)"""
def delete_shelf (directories):
    shelf_to_delete = input("Введите номер полки, которую хотите удалить: ")
    if shelf_to_delete in directories and not directories[shelf_to_delete]:
        del directories[shelf_to_delete]
        print(f"Полка '{shelf_to_delete}' удалена.")
        print("Текущие полки:", ", ".join(directories.keys()))
    elif shelf_to_delete not in directories:
        print(f"Полки с номером '{shelf_to_delete}' не существует.")
    else:
        print(f"На полке '{shelf_to_delete}' находятся документы, её нельзя удалить.")

"""Общая функция для всех команд"""
def main_doc(documents):
    while True:
        command = input('Введите команду:')
        match command:
            case 'p':
                doc_number = input("Введите номер документа: ")
                owner = get_owner(documents, doc_number)
                if owner:
                  print(owner)
                else:
                  print(f"Документ с номером {doc_number} не найден.")
            case 's':
                number = input("Введите номер документа: ")
                shelf = get_shelf(directories, doc_number)
                if shelf:
                  print(shelf)
                else:
                  print(f"Документа с номером {doc_number} нет на полках.")
            case 'ads':
                show_all_doc (documents)
            case 'ds':
              delete_shelf(directories)
            case 'q':
                break
            case _:
                print('Неправильная команда')

main_doc(documents)