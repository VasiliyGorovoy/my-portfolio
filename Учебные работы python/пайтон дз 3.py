# -*- coding: utf-8 -*-
"""notbook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17huSiU9rHh0UGFDNa8S3LKZequaHi5kZ

Задание 1:

Дана переменная, в которой хранится словарь, содержащий гео-метки для каждого пользователя (пример структуры данных приведен ниже). Вам необходимо написать программу, которая выведет на экран множество уникальных гео-меток всех пользователей.
"""

ids = {'user1': [213, 213, 213, 15, 213],
       'user2': [54, 54, 119, 119, 119],
       'user3': [213, 98, 98, 35]}
# получаем плоский список всех гео-меток через list comprehension,
# оборачиваем его в функцию set(), удаляем повторяющиеся значения и возвращает множество уникальных меток
# преобразуем это множество обратно в список с помощью функции list()
unique_ids = list(set([id for user_ids in ids.values() for id in user_ids]))
print(unique_ids)

"""Задание 2:

Дана переменная, в которой хранится список поисковых запросов пользователя (пример структуры данных приведен ниже, но запросы потенциально могут быть любые). Вам необходимо написать программу, которая выведет на экран распределение количества слов в запросах в требуемом виде.
"""

queries = [
    'смотреть сериалы онлайн',
    'новости спорта',
    'афиша кино',
    'курс доллара',
    'сериалы этим летом',
    'курс по питону',
    'сериалы про спорт',
]
# создаем пустой словарь
words_count_dist = {}
# считаем общую длину
total_queries = len(queries)
# считаем количество слов в цикле
for query in queries:
  words_count = len (query.split())
  # если такого количества нет, то добавляем
  if words_count not in words_count_dist:
    words_count_dist [words_count] = 1
  # иначе увеличиваем счетчик на 1
  else:
    words_count_dist [words_count] += 1
# выводим результат с расчетом процентов через цикл
for count, frequency in sorted(words_count_dist.items()):
    procent = round ((frequency/total_queries) * 100, 2)
    print (f"Поисковых запросов, содержащих {count} слово {procent} %")

"""Задание 3:

Дана переменная, в которой хранится информация о затратах и доходе рекламных кампаний по различным источникам. Необходимо дополнить исходную структуру показателем ROI, который рассчитаем по формуле: ((revenue / cost) - 1) * 100
"""

results = {
    'vk': {'revenue': 103, 'cost': 98},
    'yandex': {'revenue': 179, 'cost': 153},
    'facebook': {'revenue': 103, 'cost': 110},
    'adwords': {'revenue': 35, 'cost': 34},
    'twitter': {'revenue': 11, 'cost': 24},
}
for company, data in results.items():
  revenue = data['revenue']
  cost = data['cost']
  roi = ((revenue / cost) - 1) * 100
  data['roi'] = round(roi, 2)
print (results)

"""Задание 4:

Дана переменная, в которой хранится статистика рекламных каналов по объемам продаж (пример структуры данных приведен ниже). Напишите программу, которая возвращает название канала с максимальным объемом продаж.
"""

stats = {'facebook': 55, 'yandex': 115, 'vk': 120, 'google': 99, 'email': 42, 'ok': 98}
# создаем переменную максимума продаж
max_sales = max(stats.values())
# проверяем максимальный объем по ключу
for key, value in stats.items():
  # если значение равно максимуму, выводим в результат
  if value == max_sales:
    print(f"Максимальный объем продаж на рекламном канале: {key}")